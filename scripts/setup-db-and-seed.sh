#!/usr/bin/env bash
set -euo pipefail

# setup-db-and-seed.sh
# Align drizzle-kit & runtime DB, rebuild migrations, apply, and seed catalogs.
# Supports:
#   --driver sqlite --db file:./dev.db
#   --driver libsql  --libsql-url ... [--libsql-token ...]
# Optional flags:
#   --reset-migrations   Rebuild drizzle/meta & wipe old *.sql before generating
#   --skip-seed          Skip starting dev server and calling seed endpoints
#   --port 5173          Dev server port (default 5173)

DRIVER="sqlite"
DB_URL="file:./dev.db"
LIBSQL_URL=""
LIBSQL_TOKEN=""
RESET="no"
SEED="yes"
PORT="5173"

while [[ $# -gt 0 ]]; do
  case "$1" in
    --driver) DRIVER="$2"; shift 2;;
    --db) DB_URL="$2"; shift 2;;
    --libsql-url) LIBSQL_URL="$2"; shift 2;;
    --libsql-token) LIBSQL_TOKEN="$2"; shift 2;;
    --reset-migrations) RESET="yes"; shift;;
    --skip-seed) SEED="no"; shift;;
    --port) PORT="$2"; shift 2;;
    -h|--help)
      cat <<USAGE
Usage:
  $0 --driver sqlite --db file:./dev.db [--reset-migrations] [--skip-seed]
  $0 --driver libsql  --libsql-url <URL> [--libsql-token <TOKEN>] [--reset-migrations] [--skip-seed]

Defaults:
  driver=sqlite  db=file:./dev.db  port=5173
USAGE
      exit 0;;
    *) echo "Unknown arg: $1" >&2; exit 1;;
  esac
done

need() { command -v "$1" >/dev/null 2>&1 || { echo "Missing required tool: $1" >&2; exit 2; }; }
need pnpm

ts() { date -u +'%Y%m%dT%H%M%SZ'; }
backup() { [[ -f "$1" ]] && cp -f "$1" "$1.backup.$(ts)"; }

echo "[info] Project root: $(pwd)"
[[ -d src/lib/db ]] || mkdir -p src/lib/db
[[ -d drizzle ]] || mkdir -p drizzle

############################################
# 1) Write .env to align runtime & migrator
############################################
backup .env
if [[ "$DRIVER" == "sqlite" ]]; then
  echo "[info] Writing .env for sqlite → $DB_URL"
  cat > .env <<EOF
# generated by setup-db-and-seed.sh
DATABASE_URL=$DB_URL
EOF
elif [[ "$DRIVER" == "libsql" ]]; then
  [[ -n "$LIBSQL_URL" ]] || { echo "[err] --libsql-url is required for driver=libsql" >&2; exit 3; }
  echo "[info] Writing .env for libsql"
  cat > .env <<EOF
# generated by setup-db-and-seed.sh
LIBSQL_URL=$LIBSQL_URL
LIBSQL_AUTH_TOKEN=$LIBSQL_TOKEN
EOF
else
  echo "[err] --driver must be 'sqlite' or 'libsql'" >&2; exit 3;
fi

############################################
# 2) Write drizzle.config.ts (migrator)
############################################
backup drizzle.config.ts
if [[ "$DRIVER" == "sqlite" ]]; then
  cat > drizzle.config.ts <<'TS'
import 'dotenv/config';
import type { Config } from 'drizzle-kit';

export default {
  schema: './src/lib/db/schema.ts',
  out: './drizzle',
  driver: 'better-sqlite',
  dbCredentials: { url: process.env.DATABASE_URL! }, // e.g. file:./dev.db
  verbose: true,
  strict: true
} satisfies Config;
TS
else
  cat > drizzle.config.ts <<'TS'
import 'dotenv/config';
import type { Config } from 'drizzle-kit';

export default {
  schema: './src/lib/db/schema.ts',
  out: './drizzle',
  driver: 'turso',
  dbCredentials: {
    url: process.env.LIBSQL_URL!,
    authToken: process.env.LIBSQL_AUTH_TOKEN
  },
  verbose: true,
  strict: true
} satisfies Config;
TS
fi
echo "[info] Wrote drizzle.config.ts for $DRIVER"

############################################
# 3) Write runtime db client: src/lib/db/drizzle.ts
############################################
backup src/lib/db/drizzle.ts
if [[ "$DRIVER" == "sqlite" ]]; then
  cat > src/lib/db/drizzle.ts <<'TS'
import Database from 'better-sqlite3';
import { drizzle } from 'drizzle-orm/better-sqlite3';

const url = process.env.DATABASE_URL ?? 'file:./dev.db';
const path = url.replace(/^file:/, '');
const sqlite = new Database(path);
export const db = drizzle(sqlite);
TS
else
  cat > src/lib/db/drizzle.ts <<'TS'
import { createClient } from '@libsql/client';
import { drizzle } from 'drizzle-orm/libsql';

const url = process.env.LIBSQL_URL!;
const authToken = process.env.LIBSQL_AUTH_TOKEN;
const client = createClient({ url, authToken });
export const db = drizzle(client);
TS
fi
echo "[info] Wrote src/lib/db/drizzle.ts for $DRIVER"

############################################
# 4) Ensure seed endpoints exist (idempotent)
############################################
# Seed presets
if [[ ! -f "src/routes/api/dev/seed/presets/+server.ts" ]]; then
  echo "[info] Adding seed endpoint: /api/dev/seed/presets"
  mkdir -p src/routes/api/dev/seed/presets
  cat > src/routes/api/dev/seed/presets/+server.ts <<'TS'
import type { RequestHandler } from "./$types";
import { db } from "$lib/db/drizzle";
import { containerPresets, jarVariants } from "$lib/db/schema";
import { eq, sql } from "drizzle-orm";

export const POST: RequestHandler = async () => {
  try {
    const presets = [
      { key: "monotub_66l", containerType: "monotub", label: "66 L tote",
        defaultsJson: { length_cm: 60, width_cm: 40, height_cm: 30, filter: "hepa_sticker" }, active: true },
      { key: "shoebox_6qt", containerType: "tray", label: "6 Qt shoebox",
        defaultsJson: { length_cm: 32, width_cm: 20, height_cm: 12 }, active: true },
      { key: "bag_medium", containerType: "bag", label: "Unicorn-style bag (M)",
        defaultsJson: { volume_l: 3, filter_patch_size_mm: 20, thickness_mil: 3 }, active: true },
      { key: "tray_9x13in", containerType: "tray", label: "9×13 in aluminum tray",
        defaultsJson: { length_cm: 33, width_cm: 23, height_cm: 5 }, active: true }
    ];

    let presetInserted = 0, presetSkipped = 0;
    for (const p of presets) {
      const row = { ...p, defaultsJson: JSON.stringify(p.defaultsJson) } as any;
      try {
        await db.insert(containerPresets).values(row);
        presetInserted++;
      } catch (e: any) {
        const msg = String(e?.message ?? e);
        if (/UNIQUE|PRIMARY KEY|constraint/i.test(msg)) presetSkipped++; else throw e;
      }
    }

    const [{ count: totalPresets }] = await db.select({ count: sql<number>`COUNT(*)` }).from(containerPresets);

    const jars = [
      { label: "Half Pint Regular", sizeMl: 236, mouth: "narrow", heightMm: 85,  diameterMm: 70 },
      { label: "Pint Wide Mouth",   sizeMl: 473, mouth: "wide",   heightMm: 125, diameterMm: 85 },
      { label: "Quart Wide Mouth",  sizeMl: 946, mouth: "wide",   heightMm: 170, diameterMm: 90 }
    ];

    let jarInserted = 0, jarSkipped = 0;
    for (const j of jars) {
      const [exists] = await db.select({ id: jarVariants.id }).from(jarVariants).where(eq(jarVariants.label, j.label)).limit(1);
      if (exists) { jarSkipped++; continue; }
      await db.insert(jarVariants).values(j);
      jarInserted++;
    }
    const [{ count: totalJars }] = await db.select({ count: sql<number>`COUNT(*)` }).from(jarVariants);

    return new Response(JSON.stringify({
      ok: true,
      inserted: { container_presets: presetInserted, jar_variants: jarInserted },
      skipped:  { container_presets: presetSkipped,  jar_variants: jarSkipped },
      totals:   { container_presets: Number(totalPresets), jar_variants: Number(totalJars) }
    }), { headers: { "content-type": "application/json" }});
  } catch (err: any) {
    console.error("ERROR /api/dev/seed/presets:", err);
    return new Response(JSON.stringify({ message: "Internal Error", detail: String(err?.message ?? err) }), { status: 500 });
  }
};
TS
fi

# Default location seed (optional helper)
if [[ ! -f "src/routes/api/dev/seed/default-location/+server.ts" ]]; then
  echo "[info] Adding dev default-location endpoint"
  mkdir -p src/routes/api/dev/seed/default-location
  cat > src/routes/api/dev/seed/default-location/+server.ts <<'TS'
import type { RequestHandler } from "./$types";
import { db } from "$lib/db/drizzle";
import { locations, locationMembers, users } from "$lib/db/schema";
import { eq } from "drizzle-orm";

export const POST: RequestHandler = async ({ request }) => {
  try {
    const body = await request.json().catch(() => ({}));
    const ownerUserId = Number(body.owner_user_id ?? 1);
    const name = String(body.name ?? "Default Lab");
    const tz = String(body.timezone ?? "America/Denver");

    const [u] = await db.select().from(users).where(eq(users.id, ownerUserId)).limit(1);
    if (!u) {
      await db.insert(users).values({
        id: ownerUserId, username: `user${ownerUserId}`, email: `user${ownerUserId}@example.test`,
        passwordHash: "dev", roleGlobal: "admin", isActive: true
      } as any);
    }

    const [loc] = await db.select().from(locations).where(eq(locations.name, name)).limit(1);
    const locId = loc?.id ?? (await db.insert(locations).values({
      ownerUserId, name, nickname: "Home", timezone: tz, isActive: true
    } as any).returning({ id: locations.id }))[0].id;

    const [m] = await db.select().from(locationMembers).where(eq(locationMembers.locationId, locId)).limit(1);
    if (!m) {
      await db.insert(locationMembers).values({ locationId: locId, userId: ownerUserId, memberRole: "owner" } as any);
    }

    return new Response(JSON.stringify({ ok: true, location_id: locId }), { headers: { "content-type": "application/json" }});
  } catch (err: any) {
    console.error("ERROR /api/dev/seed/default-location:", err);
    return new Response(JSON.stringify({ message: "Internal Error", detail: String(err?.message ?? err) }), { status: 500 });
  }
};
TS
fi

############################################
# 5) Rebuild migrations (optional reset)
############################################
if [[ "$RESET" == "yes" ]]; then
  echo "[info] Resetting drizzle migrations (backup + clean)"
  mkdir -p backups && cp -r drizzle "backups/drizzle.$(ts)" || true
  rm -rf drizzle/meta
  rm -f drizzle/*.sql
fi
mkdir -p drizzle/meta
if [[ ! -f drizzle/meta/_journal.json ]]; then
  printf '{ "version":"6","dialect":"sqlite","entries":[] }\n' > drizzle/meta/_journal.json
fi

echo "[info] Generating migrations…"
pnpm drizzle-kit generate

echo "[info] Applying migrations to the SAME DB the app will use…"
pnpm drizzle-kit migrate

############################################
# 6) Seed via dev server (optional)
############################################
if [[ "$SEED" == "yes" ]]; then
  echo "[info] Starting dev server on :$PORT to seed…"
  # start in background
  (pnpm dev -- --port "$PORT" >/tmp/mycotrak_dev.log 2>&1) &
  DEV_PID=$!

  # wait for server
  echo -n "[info] Waiting for server"
  for i in {1..60}; do
    if curl -s "http://localhost:$PORT/" >/dev/null; then echo " — up"; break; fi
    echo -n "."
    sleep 1
  done

  # seed catalogs
  echo "[info] Seeding container_presets / jar_variants…"
  curl -s -X POST "http://localhost:$PORT/api/dev/seed/presets" || true
  echo
  # seed default location
  echo "[info] Ensuring default location exists…"
  curl -s -X POST "http://localhost:$PORT/api/dev/seed/default-location" \
    -H "content-type: application/json" -d '{"owner_user_id":1,"name":"Default Lab","timezone":"America/Denver"}' || true
  echo

  # quick catalog checks
  echo "[info] Catalog: container-presets"
  curl -s "http://localhost:$PORT/api/catalog/container-presets" || true
  echo
  echo "[info] Catalog: jar-variants"
  curl -s "http://localhost:$PORT/api/catalog/jar-variants" || true
  echo

  echo "[info] Stopping dev server (PID $DEV_PID)…"
  kill "$DEV_PID" >/dev/null 2>&1 || true
fi

echo "[done] DB aligned, migrations applied, seed attempted."
echo "       Check /tmp/mycotrak_dev.log for server logs if something looked off."
