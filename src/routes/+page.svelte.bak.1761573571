<!-- src/routes/+page.svelte -->
<script lang="ts">
  import { browser } from "$app/environment";
  /** Full dashboard page with expand toggles, styling, and lazy-load on expand. */

  // ----- input from +page.server.ts -----
  export let data: {
    locationId: number | null;
    statusCounts?: {
      locationId: number;
      total: number;
      breakdown: Record<string, number>;
      message?: string; detail?: string;
      groups?: { pending: number; active: number; completed: number; failed: number; }
    };
    activeGrows?: { locationId: number; rows: any[]; message?: string; detail?: string };
    lowStock?: { locationId: number; rows: any[]; message?: string; detail?: string };
    recentYields?: {
      locationId: number; days: number;
      totals: { wetWeightG: number; dryWeightG: number };
      rows: any[]; message?: string; detail?: string;
    };
    activity?: { locationId: number; days: number; count: number; items: any[]; message?: string; detail?: string };
    nextActions?: { locationId: number; count: number; actions: any[]; message?: string; detail?: string };
    shelfUtil?: {
      locationId: number; capacityCm2: number; usedCm2: number; percent: number;
      itemsCounted: number; shelvesCount: number; message?: string; detail?: string;
    };
    recentNotes?: { locationId: number; rows: Array<{ ts: string; source: string; note: string; growId?: number }> };
    assetLocations?: {
      locationId: number;
      bins: Array<{ id: number; label: string; shelfLabel?: string | null; count: number }>;
      assignments: Array<{ binId: number; growId: number; groupLabel?: string | null }>;
    };
  };

  // ----- helpers -----
  const fmtDate = (s?: string | null) => (s ? new Date(s).toLocaleDateString() : "—");
  const grams = (n?: number | null) => `${(n ?? 0).toLocaleString()} g`;
  const pct = (n?: number | null) => `${Math.max(0, Math.min(100, Math.round(n ?? 0)))}%`;
  const cm2 = (n?: number | null) => `${(Math.round((n ?? 0) * 10) / 10).toLocaleString()} cm²`;
  const hasError = (o: any) => o && o.message === "Internal Error";

  // ----- local state (mutable so lazy-loaders can update) -----
  let sc = data.statusCounts ?? { total: 0, breakdown: {} as Record<string, number>, groups: { pending: 0, active: 0, completed: 0, failed: 0 } };
  let ag = data.activeGrows ?? { rows: [] as any[] };
  let ls = data.lowStock ?? { rows: [] as any[] };
  let ry = data.recentYields ?? { days: 30, totals: { wetWeightG: 0, dryWeightG: 0 }, rows: [] as any[] };
  let act = data.activity ?? { days: 14, count: 0, items: [] as any[] };
  let na = data.nextActions ?? { count: 0, actions: [] as any[] };
  let su = data.shelfUtil ?? { capacityCm2: 0, usedCm2: 0, percent: 0, itemsCounted: 0, shelvesCount: 0 };
  let rn = data.recentNotes ?? { rows: [] as any[] };
  let al = data.assetLocations ?? { bins: [] as any[], assignments: [] as any[] };

  // Expand toggles
  let expanded = {
    active: false,
    lowStock: false,
    yields: false,
    tasks: false,
    activity: false,
    notes: false,
    shelf: false,
    shelfAssets: false
  };

  // Sorting controls
  let activeSort: "updated" | "start" = "updated";
  let lowStockSort: "delta" | "name" = "delta";
  let yieldsSort: "date" | "wet" | "dry" = "date";

  // Quick-start command (rendered as string to avoid brace parsing in markup)
  const quickStartCmd =
    `curl -X POST http://localhost:5173/api/dev/seed/default-location ` +
    `-H "content-type: application/json" ` +
    `-d '{"owner_user_id":1,"name":"Default Lab","timezone":"America/Denver"}'`;

  // Group totals (Pending/Active/Completed/Failed)
  function groupTotals() {
    if (sc.groups) return sc.groups;
    const b = sc.breakdown ?? {};
    const pending = (b.planning ?? b.pending ?? 0);
    const active = (b.incubating ?? 0) + (b.fruiting ?? 0) + (b.active ?? 0);
    const completed = (b.complete ?? b.completed ?? 0);
    const failed = (b.contaminated ?? 0) + (b.retired ?? 0) + (b.failed ?? 0);
    return { pending, active, completed, failed };
  }
  let g = groupTotals();
  $: g = groupTotals();

  // ----- Lazy-load on expand: minimal, one-time fetchers -----
  const flags = {
    active: { loading: false, loaded: false },
    lowStock: { loading: false, loaded: false },
    yields: { loading: false, loaded: false },
    tasks: { loading: false, loaded: false },
    activity: { loading: false, loaded: false },
    notes: { loading: false, loaded: false },
    shelfAssets: { loading: false, loaded: false }
  };

  const qsBase = `location_id=${data.locationId}`;

  async function fetchJson(url: string) {
    const r = await fetch(url);
    if (!r.ok) throw new Error(await r.text());
    return r.json();
  }

  async function loadMoreActive() {
    if (flags.active.loading || flags.active.loaded || !data.locationId) return;
    flags.active.loading = true;
    try {
      const more = await fetchJson(`/api/grows?${qsBase}`);
      ag = { ...ag, rows: more };
      flags.active.loaded = true;
    } finally { flags.active.loading = false; }
  }

  async function loadMoreLowStock() {
    if (flags.lowStock.loading || flags.lowStock.loaded || !data.locationId) return;
    flags.lowStock.loading = true;
    try {
      const more = await fetchJson(`/api/dashboard/low-stock?${qsBase}&limit=200&expanded=1`);
      const rows = more.rows ?? more;
      ls = { ...ls, rows };
      flags.lowStock.loaded = true;
    } finally { flags.lowStock.loading = false; }
  }

  async function loadMoreYields() {
    if (flags.yields.loading || flags.yields.loaded || !data.locationId) return;
    flags.yields.loading = true;
    try {
      const more = await fetchJson(`/api/dashboard/recent-yields?${qsBase}&days=90&limit=200&expanded=1`);
      ry = { ...ry, rows: more.rows ?? ry.rows, totals: more.totals ?? ry.totals };
      flags.yields.loaded = true;
    } finally { flags.yields.loading = false; }
  }

  async function loadMoreTasks() {
    if (flags.tasks.loading || flags.tasks.loaded || !data.locationId) return;
    flags.tasks.loading = true;
    try {
      const more = await fetchJson(`/api/dashboard/next-actions?${qsBase}&limit=200&expanded=1`);
      na = { ...na, actions: more.actions ?? na.actions, count: more.count ?? (more.actions?.length ?? na.actions?.length ?? 0) };
      flags.tasks.loaded = true;
    } finally { flags.tasks.loading = false; }
  }

  async function loadMoreActivity() {
    if (flags.activity.loading || flags.activity.loaded || !data.locationId) return;
    flags.activity.loading = true;
    try {
      const more = await fetchJson(`/api/dashboard/activity?${qsBase}&days=60&limit=200&expanded=1`);
      act = { ...act, items: more.items ?? act.items, count: more.count ?? (more.items?.length ?? act.items?.length ?? 0) };
      flags.activity.loaded = true;
    } finally { flags.activity.loading = false; }
  }

  async function loadRecentNotes() {
    if (flags.notes.loading || flags.notes.loaded || !data.locationId) return;
    flags.notes.loading = true;
    try {
      const more = await fetchJson(`/api/dashboard/recent-notes?${qsBase}`);
      rn = { ...rn, rows: more.rows ?? rn.rows };
      flags.notes.loaded = true;
    } finally { flags.notes.loading = false; }
  }

  async function loadAssetLocations() {
    if (flags.shelfAssets.loading || flags.shelfAssets.loaded || !data.locationId) return;
    flags.shelfAssets.loading = true;
    try {
      const more = await fetchJson(`/api/dashboard/asset-locations?${qsBase}`);
      al = { ...al, bins: more.bins ?? al.bins, assignments: more.assignments ?? al.assignments };
      flags.shelfAssets.loaded = true;
    } finally { flags.shelfAssets.loading = false; }
  }

  // Reactive watchers: when a panel expands, fetch once.
 
- if (browser && expanded.active) loadMoreActive();
 
- if (browser && expanded.lowStock) loadMoreLowStock();
 
- if (browser && expanded.yields) loadMoreYields();
 
- if (browser && expanded.tasks) loadMoreTasks();
 
- if (browser && expanded.activity) loadMoreActivity();
 
- if (browser && expanded.notes) loadRecentNotes();
 
- if (browser && expanded.shelfAssets) loadAssetLocations();
</script>

<svelte:head><title>Dashboard</title></svelte:head>

{#if !data.locationId}
  <section class="p-6 max-w-4xl mx-auto">
    <h1 class="text-2xl font-bold mb-2">Welcome to Grow Planner</h1>
    <p class="opacity-70 mb-6">No location found yet. Create a location to light up your dashboard.</p>
    <div class="rounded-2xl border shadow-sm p-4 bg-gradient-to-br from-emerald-50 to-teal-50">
      <p class="mb-2 font-medium">Quick start (dev):</p>
      <pre class="text-sm overflow-auto p-3 bg-white rounded-lg border"><code>{quickStartCmd}</code></pre>
      <p class="mt-3 text-sm opacity-70">Then refresh this page.</p>
    </div>
  </section>
{:else}
  <section class="p-6 space-y-8">
    <!-- Header -->
    <div class="flex flex-wrap items-end justify-between gap-4">
      <div>
        <h1 class="text-3xl font-bold tracking-tight">Dashboard</h1>
        <p class="text-sm opacity-70">Location ID: {data.locationId}</p>
      </div>
    </div>

    <!-- Four-part totals -->
    <div class="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-4">
      <div class="rounded-2xl border shadow-sm p-4 bg-gradient-to-br from-yellow-50 to-amber-50">
        <div class="text-xs uppercase opacity-70">Pending</div>
        <div class="text-3xl font-semibold">{g.pending}</div>
        <div class="text-[11px] opacity-60 mt-1">all-time</div>
      </div>
      <div class="rounded-2xl border shadow-sm p-4 bg-gradient-to-br from-sky-50 to-indigo-50">
        <div class="text-xs uppercase opacity-70">Active</div>
        <div class="text-3xl font-semibold">{g.active}</div>
        <div class="text-[11px] opacity-60 mt-1">all-time</div>
      </div>
      <div class="rounded-2xl border shadow-sm p-4 bg-gradient-to-br from-emerald-50 to-teal-50">
        <div class="text-xs uppercase opacity-70">Completed</div>
        <div class="text-3xl font-semibold">{g.completed}</div>
        <div class="text-[11px] opacity-60 mt-1">all-time</div>
      </div>
      <div class="rounded-2xl border shadow-sm p-4 bg-gradient-to-br from-rose-50 to-red-50">
        <div class="text-xs uppercase opacity-70">Failed</div>
        <div class="text-3xl font-semibold">{g.failed}</div>
        <div class="text-[11px] opacity-60 mt-1">all-time</div>
      </div>
    </div>

    <!-- Active Grows (expandable) -->
    <section class="rounded-2xl border shadow-sm overflow-hidden">
      <header class="p-4 border-b flex items-center gap-3 justify-between bg-white/60 backdrop-blur">
        <div class="flex items-center gap-3">
          <h2 class="font-semibold text-lg">Active Grows</h2>
          <button class="text-xs px-2 py-1 rounded-lg border hover:bg-gray-50" on:click={() => expanded.active = !expanded.active}>
            {expanded.active ? 'Collapse' : 'Expand'}
          </button>
          {#if flags.active.loading}<span class="text-xs opacity-60">Loading…</span>{/if}
        </div>
        <div class="flex items-center gap-2 text-xs">
          <span class="opacity-70">Sort</span>
          <select bind:value={activeSort} class="border rounded-md px-2 py-1">
            <option value="updated">Updated</option>
            <option value="start">Start date</option>
          </select>
          <span class="opacity-70">{ag.rows?.length ?? 0} showing</span>
        </div>
      </header>
      <div class="divide-y">
        {#if hasError(data.activeGrows)}
          <div class="p-4 text-sm text-red-600">{data.activeGrows?.detail}</div>
        {:else if (ag.rows?.length ?? 0) === 0}
          <div class="p-4 text-sm opacity-70">No active grows.</div>
        {:else}
          {#each [...ag.rows].sort((a,b) =>
            activeSort === 'updated'
              ? String(b.updatedAt ?? '').localeCompare(String(a.updatedAt ?? ''))
              : String(b.startDate ?? '').localeCompare(String(a.startDate ?? ''))
          ) as gRow}
            <div class="p-4 flex items-start justify-between gap-4 hover:bg-gray-50/60">
              <div>
                <div class="font-medium">{gRow.batchCode || `Grow #${gRow.id}`}</div>
                <div class="text-xs opacity-70 capitalize">{gRow.status || 'unknown'}</div>
                <div class="text-xs opacity-70">Start: {fmtDate(gRow.startDate)} • Fruiting: {fmtDate(gRow.movedToFruitingAt)}</div>
              </div>
              <div class="text-xs opacity-70 text-right">
                <div>Container: {gRow.containerType || '—'}</div>
                <div>Updated: {fmtDate(gRow.updatedAt)}</div>
              </div>
            </div>
          {/each}
        {/if}
        {#if expanded.active}
          <div class="p-4 bg-white/70">
            <div class="text-xs opacity-70 mb-2">Filters</div>
            <div class="flex flex-wrap gap-2">
              <button class="text-xs px-2 py-1 rounded-lg border">Incubating</button>
              <button class="text-xs px-2 py-1 rounded-lg border">Fruiting</button>
              <button class="text-xs px-2 py-1 rounded-lg border">Monotub</button>
              <button class="text-xs px-2 py-1 rounded-lg border">Bag</button>
            </div>
          </div>
        {/if}
      </div>
    </section>

    <!-- Low Stock (expandable) -->
    <section class="rounded-2xl border shadow-sm overflow-hidden">
      <header class="p-4 border-b flex items-center gap-3 justify-between bg-white/60 backdrop-blur">
        <div class="flex items-center gap-3">
          <h2 class="font-semibold text-lg">Low Stock</h2>
          <button class="text-xs px-2 py-1 rounded-lg border hover:bg-gray-50" on:click={() => expanded.lowStock = !expanded.lowStock}>
            {expanded.lowStock ? 'Collapse' : 'Expand'}
          </button>
          {#if flags.lowStock.loading}<span class="text-xs opacity-60">Loading…</span>{/if}
        </div>
        <div class="flex items-center gap-2 text-xs">
          <span class="opacity-70">Sort</span>
          <select bind:value={lowStockSort} class="border rounded-md px-2 py-1">
            <option value="delta">Lowest first</option>
            <option value="name">Name</option>
          </select>
          <span class="opacity-70">{ls.rows?.length ?? 0} items</span>
        </div>
      </header>
      {#if hasError(data.lowStock)}
        <div class="p-4 text-sm text-red-600">{data.lowStock?.detail}</div>
      {:else if (ls.rows?.length ?? 0) === 0}
        <div class="p-4 text-sm opacity-70">No low-stock items.</div>
      {:else}
        <div class="overflow-auto">
          <table class="min-w-full text-sm">
            <thead>
              <tr class="text-left border-b">
                <th class="px-4 py-2">Name</th>
                <th class="px-4 py-2">SKU</th>
                <th class="px-4 py-2">In Stock</th>
                <th class="px-4 py-2">Reorder @</th>
                <th class="px-4 py-2">Supplier</th>
              </tr>
            </thead>
            <tbody>
              {#each [...ls.rows].sort((a,b) => {
                if (lowStockSort === 'name') return String(a.name).localeCompare(String(b.name));
                const da = (a.inStockQty ?? 0) - (a.reorderPoint ?? 0);
                const db = (b.inStockQty ?? 0) - (b.reorderPoint ?? 0);
                return da - db;
              }) as s}
                <tr class="border-b hover:bg-gray-50/60">
                  <td class="px-4 py-2">{s.name}</td>
                  <td class="px-4 py-2 opacity-70">{s.sku || '—'}</td>
                  <td class="px-4 py-2">{s.inStockQty ?? 0}</td>
                  <td class="px-4 py-2">{s.reorderPoint ?? 0}</td>
                  <td class="px-4 py-2 opacity-70">{s.preferredSupplier || '—'}</td>
                </tr>
              {/each}
            </tbody>
          </table>
        </div>
      {/if}
      {#if expanded.lowStock}
        <div class="p-4 bg-white/70 text-xs opacity-70">Tip: click headers to sort (coming soon).</div>
      {/if}
    </section>

    <!-- Recent Yields (expandable) -->
    <section class="rounded-2xl border shadow-sm overflow-hidden">
      <header class="p-4 border-b flex items-center gap-3 justify-between bg-white/60 backdrop-blur">
        <div class="flex items-center gap-3">
          <h2 class="font-semibold text-lg">Recent Yields (last {ry.days} days)</h2>
          <button class="text-xs px-2 py-1 rounded-lg border hover:bg-gray-50" on:click={() => expanded.yields = !expanded.yields}>
            {expanded.yields ? 'Collapse' : 'Expand'}
          </button>
          {#if flags.yields.loading}<span class="text-xs opacity-60">Loading…</span>{/if}
        </div>
        <div class="flex items-center gap-3 text-xs">
          <div class="opacity-70">
            Total: <span class="font-medium">{grams(ry.totals?.wetWeightG)}</span> wet • <span class="font-medium">{grams(ry.totals?.dryWeightG)}</span> dry
          </div>
          <span class="opacity-70">Sort</span>
          <select bind:value={yieldsSort} class="border rounded-md px-2 py-1">
            <option value="date">Latest</option>
            <option value="wet">Wet weight</option>
            <option value="dry">Dry weight</option>
          </select>
        </div>
      </header>
      {#if hasError(data.recentYields)}
        <div class="p-4 text-sm text-red-600">{data.recentYields?.detail}</div>
      {:else if (ry.rows?.length ?? 0) === 0}
        <div class="p-4 text-sm opacity-70">No harvests recorded.</div>
      {:else}
        <div class="divide-y">
          {#each [...ry.rows].sort((a,b) => {
            if (yieldsSort === 'wet') return (b.wetWeightG ?? 0) - (a.wetWeightG ?? 0);
            if (yieldsSort === 'dry') return (b.dryWeightG ?? 0) - (a.dryWeightG ?? 0);
            return String(b.harvestDate ?? '').localeCompare(String(a.harvestDate ?? ''));
          }) as y}
            <div class="p-4 flex items-center justify-between hover:bg-gray-50/60">
              <div class="text-sm">
                <div class="font-medium">Grow #{y.growId} — Flush {y.flushNumber ?? '—'}</div>
                <div class="text-xs opacity-70">Harvest: {fmtDate(y.harvestDate)}</div>
              </div>
              <div class="text-right text-sm">
                <div>{grams(y.wetWeightG)}</div>
                <div class="opacity-70">{grams(y.dryWeightG)}</div>
              </div>
            </div>
          {/each}
        </div>
      {/if}
    </section>

    <!-- Upcoming Tasks (renamed from Next Actions) -->
    <section class="rounded-2xl border shadow-sm overflow-hidden">
      <header class="p-4 border-b flex items-center justify-between bg-white/60 backdrop-blur">
        <div class="flex items-center gap-3">
          <h2 class="font-semibold text-lg">Upcoming Tasks</h2>
          <button class="text-xs px-2 py-1 rounded-lg border hover:bg-gray-50" on:click={() => expanded.tasks = !expanded.tasks}>
            {expanded.tasks ? 'Collapse' : 'Expand'}
          </button>
          {#if flags.tasks.loading}<span class="text-xs opacity-60">Loading…</span>{/if}
        </div>
        <span class="text-xs opacity-70">{na.count ?? na.actions?.length ?? 0} suggestions</span>
      </header>
      {#if hasError(data.nextActions)}
        <div class="p-4 text-sm text-red-600">{data.nextActions?.detail}</div>
      {:else if ((na.actions?.length ?? 0) === 0)}
        <div class="p-4 text-sm opacity-70">No suggested actions right now.</div>
      {:else}
        <ul class="divide-y">
          {#each na.actions as a}
            <li class="p-4 flex items-start justify-between gap-4 hover:bg-gray-50/60">
              <div class="text-sm">
                <div class="font-medium">{a.action}</div>
                <div class="opacity-70 text-xs">{a.reason}</div>
              </div>
              <div class="text-xs opacity-70">Grow #{a.growId}</div>
            </li>
          {/each}
        </ul>
      {/if}
    </section>

    <!-- Shelf Utilization tool (two modes) -->
    <section class="rounded-2xl border shadow-sm overflow-hidden">
      <header class="p-4 border-b flex items-center justify-between bg-white/60 backdrop-blur">
        <div class="flex items-center gap-3">
          <h2 class="font-semibold text-lg">Shelf Tool</h2>
          <button class="text-xs px-2 py-1 rounded-lg border hover:bg-gray-50" on:click={() => expanded.shelf = !expanded.shelf}>
            {expanded.shelf ? 'Collapse' : 'Expand'}
          </button>
        </div>
        <div class="text-xs opacity-70">
          Capacity: <span class="font-medium">{cm2(su.capacityCm2)}</span> • Used: <span class="font-medium">{cm2(su.usedCm2)}</span> • {pct(su.percent)} utilized
        </div>
      </header>
      <div class="grid grid-cols-1 lg:grid-cols-2">
        <!-- Capacity Planner -->
        <div class="p-4">
          <h3 class="font-medium mb-2">Capacity Planner</h3>
          <div class="w-full h-3 bg-gray-200 rounded-full overflow-hidden mb-2">
            <div class="h-full bg-emerald-500" style={`width:${su.percent ?? 0}%`}></div>
          </div>
          <div class="text-xs opacity-70">{su.itemsCounted} items across {su.shelvesCount} shelves</div>
          {#if expanded.shelf}
            <div class="mt-3 text-xs opacity-70">Future: simulate placements &amp; scheduling here.</div>
          {/if}
        </div>
        <!-- Asset Locations -->
        <div class="p-4 border-t lg:border-t-0 lg:border-l">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-2">
              <h3 class="font-medium">Asset Locations</h3>
              {#if flags.shelfAssets.loading}<span class="text-xs opacity-60">Loading…</span>{/if}
            </div>
            <button class="text-xs px-2 py-1 rounded-lg border hover:bg-gray-50" on:click={() => expanded.shelfAssets = !expanded.shelfAssets}>
              {expanded.shelfAssets ? 'Collapse' : 'Expand'}
            </button>
          </div>
          {#if (al?.bins?.length ?? 0) === 0}
            <div class="text-sm opacity-70 mt-2">No bins defined. Create bins to track where grows live.</div>
          {:else}
            <ul class="mt-2 divide-y">
              {#each al.bins as b}
                <li class="py-2">
                  <div class="flex items-center justify-between">
                    <div class="text-sm font-medium">{b.label}</div>
                    <div class="text-xs opacity-70">{b.count} assigned</div>
                  </div>
                  {#if expanded.shelfAssets}
                    <div class="text-xs opacity-70">Shelf: {b.shelfLabel || '—'}</div>
                  {/if}
                </li>
              {/each}
            </ul>
          {/if}
        </div>
      </div>
    </section>

    <!-- Recent Notes -->
    <section class="rounded-2xl border shadow-sm overflow-hidden">
      <header class="p-4 border-b flex items-center justify-between bg-white/60 backdrop-blur">
        <div class="flex items-center gap-3">
          <h2 class="font-semibold text-lg">Recent Notes</h2>
          <button class="text-xs px-2 py-1 rounded-lg border hover:bg-gray-50" on:click={() => expanded.notes = !expanded.notes}>
            {expanded.notes ? 'Collapse' : 'Expand'}
          </button>
          {#if flags.notes.loading}<span class="text-xs opacity-60">Loading…</span>{/if}
        </div>
        <span class="text-xs opacity-70">{rn.rows?.length ?? 0} notes</span>
      </header>
      {#if (rn.rows?.length ?? 0) === 0}
        <div class="p-4 text-sm opacity-70">No notes yet.</div>
      {:else}
        <ul class="divide-y">
          {#each rn.rows as n}
            <li class="p-4 flex items-center justify-between hover:bg-gray-50/60">
              <div class="text-sm">
                <div class="font-medium">{n.note}</div>
                <div class="text-xs opacity-70">{n.source}{#if n.growId} • Grow #{n.growId}{/if}</div>
              </div>
              <div class="text-xs opacity-70">{fmtDate(n.ts)}</div>
            </li>
          {/each}
        </ul>
      {/if}
    </section>

    <!-- Activity -->
    <section class="rounded-2xl border shadow-sm overflow-hidden">
      <header class="p-4 border-b flex items-center justify-between bg-white/60 backdrop-blur">
        <div class="flex items-center gap-3">
          <h2 class="font-semibold text-lg">Recent Activity (last {act.days} days)</h2>
          <button class="text-xs px-2 py-1 rounded-lg border hover:bg-gray-50" on:click={() => expanded.activity = !expanded.activity}>
            {expanded.activity ? 'Collapse' : 'Expand'}
          </button>
          {#if flags.activity.loading}<span class="text-xs opacity-60">Loading…</span>{/if}
        </div>
        <span class="text-xs opacity-70">{act.count ?? act.items?.length ?? 0} events</span>
      </header>
      {#if hasError(data.activity)}
        <div class="p-4 text-sm text-red-600">{data.activity?.detail}</div>
      {:else if ((act.items?.length ?? 0) === 0)}
        <div class="p-4 text-sm opacity-70">No recent activity.</div>
      {:else}
        <ul class="divide-y">
          {#each act.items as it}
            <li class="p-4 flex items-center justify-between hover:bg-gray-50/60">
              <div class="text-sm">
                <span class="font-medium capitalize">{it.type.replaceAll('_',' ')}</span>
                {#if it.label} <span class="opacity-70">— {it.label}</span> {/if}
                <span class="opacity-70"> • Grow #{it.growId}</span>
              </div>
              <div class="text-xs opacity-70">{fmtDate(it.ts)}</div>
            </li>
          {/each}
        </ul>
      {/if}
    </section>
  </section>
{/if}